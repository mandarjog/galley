// Copyright 2017 Istio Authors
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package istio.galley.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

import "api/galley/v1/metadata.proto";

// Galley uses a hierarchical resource model.
//
// Directories are organizational units that can be protected by ACLs.
// ACLs are enforced and managed externally.
//
// Every directory contains a mapping that maps it's subdirectories
// to a subdomain. The subdomains are expressed in reverse dns notation
// like java package names. ex: com.google
// subdomains define a scope that the configuration cannot exceed.
//
// A directory has one or more config files with a .cfg extension.
// A directory is a special file without the .cfg extension and with no content.
// Galley understands the mapping between config "types" and the components
// that process them.
service Galley {
  // Get contents of a file (or directory).
  // Directory has no content so always returns empty.
  // Get can be used to check the existence of a directory.
  rpc GetFile(GetFileRequest) returns (File) {
    option (google.api.http) = {
      get: "/v1/{path=**}"
    };
  };

  // Delete a config file (or directory).
  // A delete operation may fail validation due to referential integrity checks.
  // google.rpc.Status.details contains reasons for the failure as ValidationErrors.
  rpc DeleteFile(DeleteFileRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{path=**}"
    };
  };

  // List config files.
  // A note on http mapping.
  // google.api.http permits the multi segment match '**' operator as the last match only, 
  // except when :VERB is used. Here we use :list verb to disambiguate between
  // GET on a file and GET on a directory.
  rpc ListFiles(ListFilesRequest) returns (ListFilesResponse) {
    option (google.api.http) = {
      get: "/v1/{path=**}:list"
    };
  }

  // Create a config file (or directory).
  // Creation of a config file may fail due to validation errors.
  // google.rpc.Status.details contains reasons for the failure as ValidationErrors.
  rpc CreateFile(CreateFileRequest) returns (File) {
    option (google.api.http) = {
      post: "/v1/{path=**}"
      body: "file"
    };
  };

  // Update a config file (or directory).
  // May be used to create or update a new file.
  // Updating a config file may fail due to validation errors.
  // google.rpc.Status.details contains reasons for the failure as ValidationErrors.
  rpc UpdateFile(UpdateFileRequest) returns (File) {
    option (google.api.http) = {
      put: "/v1/{path=**}"
      body: "file"
    };
  };
}

message CreateFileRequest {
   // path of the entry from root.
  string path = 1;

  // config file if the path refers to a file.
  File file = 2;
}

message UpdateFileRequest {
   // path of the entry from root.
  string path = 1;

  // config file if the path refers to a file.
  File file = 2;
}

// Contains path and
// an optional File available if this entry is not a directory.
message ConfigEntry{
  // path of the entry from root.
  string path = 1;

  // config file.
  File file = 2;
}

message ListFilesResponse{
  // if include_data is specified, this includes the file.
  repeated ConfigEntry entries = 1;

  // If next_page_token is not empty, this is a paged result.
  // use this value in the next request.
  string next_page_token = 2;
}

message ListFilesRequest{
  // path of the directory from root.
  string path = 1;

  // recurse thru the hierarchy. 
  bool recurse = 2;

  // include file contents along with keys.
  bool include_data = 3;

  // paged result, set to empty on first page.
  string page_token = 4;

  // If non zero, response should have at most these number of entries.
  int32 max_page_size = 5;
}

message GetFileRequest{
  // path of the config file from root.
  string path = 1; 
}

message DeleteFileRequest{
  // path of the config file from root.
  string path = 1; 
}

// A configuration file stored at a location.
// A file must have a *.cfg extension.
// File also represents a directory if the name does not have a *.cfg extension.
// A directory contains no data.
message File{
  bytes contents = 1;

  // metadata assigned by the server. Cannot be changed by the client.
  ServerMetadata serverMetadata =  2;
}
